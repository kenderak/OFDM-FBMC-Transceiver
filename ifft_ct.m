%% Cooley-Tukey IFFT algorithm
function Xk = ifft_ct(xn,N,s)
    e_num = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901157383418793070215408914993488416750924476146066808226480016847741185374234544243710753907774499206955170276183860626133138458300075204493382656029760673711320070932870912744374704723069697720931014169283681902551510865746377211125238978442505695369677078;
    
    if (N <= 1)
        Xk(1) = xn(1);
        return
    else
        % Evens!
        xn_even = xn(1:2:N);
        Xk(1:N/2)   = ifft_ct(xn_even,N/2,2*s);
        
        % Odds!
        xn_odd = xn(2:2:N);
        Xk(N/2+1:N) = ifft_ct(xn_odd,N/2,2*s);
        
        for k = 0:(N/2)-1
            t = Xk(k+1);
            Xk(k+1) = t + e_num^(2*pi*1i*k/N) * Xk(k+1+N/2);
            Xk(k+1+N/2) = t - e_num^(2*pi*1i*k/N) * Xk(k+1+N/2);
        end
    end
end

